import { Injectable } from '@nestjs/common';
import { PrismaService } from 'prisma/prisma.service';

@Injectable()
export class StarsService {
  constructor(private prisma: PrismaService) { }

  // R√©cup√®re les 50 √©toiles les plus proches de la Terre visibles √† l'≈ìil nu
  // Une √©toile est visible √† l'≈ìil nu si sa magnitude < 6
  // Retourne aussi la constellation associ√©e √† chaque √©toile
  async getNearestVisibleStars() {
    return this.prisma.star.findMany({
      where: {
        mag: { lt: 6 },
      },
      orderBy: {
        dist: 'asc',
      },
      distinct: ['hip'], // √âviter les doublons d'√©toiles
      take: 50,
      include: {
        constellation: true,
      },
    });
  }
  // R√©cup√®re les 50 √©toiles les plus brillantes
  // La brillance est d√©termin√©e par la magnitude (plus elle est faible, plus l'√©toile est brillante)
  async getBrightestStars() {
    return this.prisma.star.findMany({
      orderBy: {
        mag: 'asc', // Tri par magnitude croissante (du plus brillant au moins brillant)
      },
      take: 50,
      include: {
        constellation: true,
      },
    });
  }

  // R√©cup√®re les constellations avec leurs √©toiles associ√©es
  async getConstellationsWithStars() {
    return this.prisma.constellation.findMany({
      distinct: ['name'], // √âviter les doublons de constellations
      include: {
        stars: true,
      },
    });
  }

  // R√©cup√®re les d√©tails d'une √©toile pour le pop-up
  async getStarDetails(starId: number) {
    return this.prisma.star.findUnique({
      where: { id: starId },
      include: {
        constellation: {
          include: {
            stars: true, // Inclut les autres √©toiles de la m√™me constellation
          },
        },
      },
    });
  }

  // R√©cup√®re les 15 √©toiles les plus chaudes (bas√© sur le type spectral)
  async getHottestStars() {
    const stars = await this.prisma.star.findMany({
      where: {
        ci: { gt: -9999 }, // Filtre qui ignore les `NULL`
      },
      orderBy: {
        ci: 'asc', // Les √©toiles les plus chaudes ont un `ci` faible (n√©gatif ou proche de 0)
      },
      take: 15,
      include: {
        constellation: true,
      },
    });

    return stars;
  }


  // R√©cup√®re les 15 √©toiles les plus grosses (bas√© sur la luminosit√© comme proxy de taille)
  async getLargestStars() {
    const stars = await this.prisma.star.findMany({
      where: {
        lum: { gt: 0 }, // Ignorer les √©toiles sans luminosit√©
      },
      orderBy: {
        lum: 'desc', // Trier par luminosit√© d√©croissante
      },
      take: 15,
      include: {
        constellation: true,
      },
    });

    console.log("üåü Largest Stars:", stars);
    return stars;
  }


}
